[tool.ruff]
line-length = 120

lint.select = [
  # Bandit
  "S",
  # Bugbear
  "B",
  # Builtins
  "A",
  # comprehensions
  "C4",
  # eradicate
  "ERA",
  # flake8-2020
  "YTT",
  # isort
  "I",
  # pandas-vet
  "PD",
  # print
  "T20",
  # Pycodestyle
  "E",
  "W",
  # Pyflakes
  "F",
  # return
  "RET",
]

lint.extend-ignore = [
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  # Use of `assert` detected
  "S101",
  # Possible hardcoded password assigned to: "password"
  "S105",
  # Possible hardcoded password assigned to argument: "password"
  "S106",
  # Standard pseudo-random generators are not suitable for cryptographic purposes
  "S311",
]
"docs/conf.py" = [
  # Variable `copyright` is shadowing a Python builtin
  "A001",
  # Found commented-out code
  "ERA001",
]
"tsperf/util/float_simulator/__init__.py" = [
  # Standard pseudo-random generators are not suitable for cryptographic purposes
  "S311",
]


# ===================
# Tasks configuration
# ===================

[tool.pytest.ini_options]
minversion = "2.0"
addopts = """
  -rfsEX -p pytester --strict-markers --verbosity=3
  --cov --cov-report=term-missing --cov-report=xml
  --capture=no
  """
log_level = "DEBUG"
log_cli_level = "DEBUG"
testpaths = ["tests"]
xfail_strict = true
markers = [
]

[tool.coverage.run]
branch = false
source = ["tsdg", "tsperf", "tsqt"]
omit = [
    "tests/*",
    "tsperf/write/cli.py",
    "tsperf/read/cli.py",
]

[tool.coverage.report]
fail_under = 0
show_missing = true
omit = [
    "tests/*",
    "tsperf/write/cli.py",
    "tsperf/read/cli.py",
]

[tool.poe.tasks]

docs-autobuild = [
  { cmd = "sphinx-autobuild --open-browser --watch tsperf docs docs/_build" }
]
docs-html = [
  { cmd = "sphinx-build -W --keep-going docs docs/_build" }
]
docs-linkcheck = [
  { cmd = "sphinx-build -W --keep-going -b linkcheck docs docs/_build" }
]

check = [
  "lint",
  "test",
]

format = [
  { cmd = "ruff format ." },
  # Configure Ruff not to auto-fix (remove!) unused variables (F841) and `print` statements (T201).
  { cmd = "ruff check --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 ." },
  { cmd = "pyproject-fmt --keep-full-version pyproject.toml" },
]

lint = [
  { cmd = "ruff format --check ." },
  { cmd = "ruff check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  # { cmd = "mypy ." },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload dist/*" },
]

test = { cmd = "pytest" }
